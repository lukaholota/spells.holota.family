
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CharacterScalarFieldEnum = {
  characterId: 'characterId',
  name: 'name',
  userId: 'userId'
};

exports.Prisma.CharacterSpellsScalarFieldEnum = {
  characterSpellId: 'characterSpellId',
  characterId: 'characterId',
  spellId: 'spellId'
};

exports.Prisma.CreatureScalarFieldEnum = {
  creatureId: 'creatureId',
  name: 'name',
  nameEng: 'nameEng',
  size: 'size',
  type: 'type',
  alignment: 'alignment',
  source: 'source',
  ac: 'ac',
  hp: 'hp',
  speed: 'speed',
  strength: 'strength',
  dexterity: 'dexterity',
  constitution: 'constitution',
  intelligence: 'intelligence',
  wisdom: 'wisdom',
  charisma: 'charisma',
  skills: 'skills',
  senses: 'senses',
  languages: 'languages',
  challenge: 'challenge',
  damageImmunity: 'damageImmunity',
  damageResistance: 'damageResistance',
  conditionImmunity: 'conditionImmunity',
  savingThrows: 'savingThrows',
  specialAbilities: 'specialAbilities',
  actions: 'actions',
  reactions: 'reactions',
  legendaryActions: 'legendaryActions',
  proficiencyBonus: 'proficiencyBonus',
  description: 'description',
  lairActions: 'lairActions',
  lairInfo: 'lairInfo',
  regionEffects: 'regionEffects',
  xp: 'xp'
};

exports.Prisma.SpellScalarFieldEnum = {
  spellId: 'spellId',
  name: 'name',
  level: 'level',
  school: 'school',
  castingTime: 'castingTime',
  range: 'range',
  components: 'components',
  duration: 'duration',
  description: 'description',
  hasRitual: 'hasRitual',
  hasConcentration: 'hasConcentration',
  source: 'source'
};

exports.Prisma.SpellClassesScalarFieldEnum = {
  classId: 'classId',
  spellId: 'spellId',
  className: 'className'
};

exports.Prisma.SpellRacesScalarFieldEnum = {
  spellId: 'spellId',
  raceId: 'raceId',
  raceName: 'raceName'
};

exports.Prisma.SpellbookScalarFieldEnum = {
  spellbookId: 'spellbookId',
  userId: 'userId'
};

exports.Prisma.SpellbookSpellsScalarFieldEnum = {
  spellbookSpellId: 'spellbookSpellId',
  spellId: 'spellId',
  spellbookId: 'spellbookId'
};

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  login: 'login',
  password: 'password'
};

exports.Prisma.ClassScalarFieldEnum = {
  classId: 'classId',
  name: 'name',
  hitDie: 'hitDie',
  primaryCastingStat: 'primaryCastingStat',
  spellcastingType: 'spellcastingType',
  abilityScoreUpLevels: 'abilityScoreUpLevels',
  subclassLevel: 'subclassLevel',
  multiclassStrReq: 'multiclassStrReq',
  multiclassDexReq: 'multiclassDexReq',
  multiclassConReq: 'multiclassConReq',
  multiclassIntReq: 'multiclassIntReq',
  multiclassWisReq: 'multiclassWisReq',
  multiclassChaReq: 'multiclassChaReq',
  armorProficiencies: 'armorProficiencies',
  weaponProficiencies: 'weaponProficiencies',
  savingThrows: 'savingThrows',
  skillProficiencies: 'skillProficiencies',
  specialSpellSlotProgression: 'specialSpellSlotProgression',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubclassScalarFieldEnum = {
  subclassId: 'subclassId',
  classId: 'classId',
  name: 'name',
  description: 'description',
  grantsSpells: 'grantsSpells'
};

exports.Prisma.PersScalarFieldEnum = {
  persId: 'persId',
  userId: 'userId',
  name: 'name',
  level: 'level',
  currentSpellSlots: 'currentSpellSlots',
  classId: 'classId',
  subclassId: 'subclassId',
  raceId: 'raceId',
  subraceId: 'subraceId',
  currentHp: 'currentHp',
  maxHp: 'maxHp',
  tempHp: 'tempHp',
  raceCustom: 'raceCustom',
  classCustom: 'classCustom',
  alignment: 'alignment',
  xp: 'xp',
  customBackground: 'customBackground',
  customFeatures: 'customFeatures',
  customLanguagesKnown: 'customLanguagesKnown',
  customEquipment: 'customEquipment',
  personalityTraits: 'personalityTraits',
  ideals: 'ideals',
  bonds: 'bonds',
  flaws: 'flaws',
  backstory: 'backstory',
  str: 'str',
  dex: 'dex',
  con: 'con',
  int: 'int',
  wis: 'wis',
  cha: 'cha',
  cp: 'cp',
  sp: 'sp',
  ep: 'ep',
  gp: 'gp',
  pp: 'pp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersMulticlassScalarFieldEnum = {
  persMulticlassId: 'persMulticlassId',
  persId: 'persId',
  classId: 'classId',
  subclassId: 'subclassId',
  classLevel: 'classLevel'
};

exports.Prisma.PersFeatureScalarFieldEnum = {
  persFeatureId: 'persFeatureId',
  persId: 'persId',
  featureId: 'featureId',
  usesRemaining: 'usesRemaining'
};

exports.Prisma.FeatureScalarFieldEnum = {
  featureId: 'featureId',
  name: 'name',
  description: 'description',
  modifiesStats: 'modifiesStats',
  limitedUsesPer: 'limitedUsesPer',
  usesCount: 'usesCount',
  displayType: 'displayType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassFeatureScalarFieldEnum = {
  classFeatureId: 'classFeatureId',
  classId: 'classId',
  featureId: 'featureId',
  levelGranted: 'levelGranted',
  grantsSpellSlots: 'grantsSpellSlots'
};

exports.Prisma.SubclassFeatureScalarFieldEnum = {
  subclassFeatureId: 'subclassFeatureId',
  subclassId: 'subclassId',
  featureId: 'featureId',
  levelGranted: 'levelGranted',
  grantsSpellSlots: 'grantsSpellSlots'
};

exports.Prisma.RaceTraitScalarFieldEnum = {
  raceTraitId: 'raceTraitId',
  raceId: 'raceId',
  featureId: 'featureId'
};

exports.Prisma.SubraceTraitScalarFieldEnum = {
  subraceTraitId: 'subraceTraitId',
  subraceId: 'subraceId',
  featureId: 'featureId'
};

exports.Prisma.BackgroundFeatureScalarFieldEnum = {
  backgroundFeatureId: 'backgroundFeatureId',
  backgroundId: 'backgroundId',
  featureId: 'featureId'
};

exports.Prisma.FeatFeatureScalarFieldEnum = {
  featFeatureId: 'featFeatureId',
  featId: 'featId',
  featureId: 'featureId'
};

exports.Prisma.MagicItemFeatureScalarFieldEnum = {
  MagicItemFeatureId: 'MagicItemFeatureId',
  magicItemId: 'magicItemId',
  featureId: 'featureId'
};

exports.Prisma.RaceScalarFieldEnum = {
  raceId: 'raceId',
  name: 'name',
  size: 'size',
  speed: 'speed',
  burrowSpeed: 'burrowSpeed',
  flightSpeed: 'flightSpeed',
  swimSpeed: 'swimSpeed',
  climbSpeed: 'climbSpeed',
  source: 'source',
  languages: 'languages',
  proficiencies: 'proficiencies',
  damageResistances: 'damageResistances'
};

exports.Prisma.SubraceScalarFieldEnum = {
  subraceId: 'subraceId',
  raceId: 'raceId',
  name: 'name',
  speedModifier: 'speedModifier',
  source: 'source',
  additionalAbilityScoreIncreases: 'additionalAbilityScoreIncreases',
  additionalLanguages: 'additionalLanguages',
  additionalProficiencies: 'additionalProficiencies',
  additionalResistances: 'additionalResistances'
};

exports.Prisma.BackgroundScalarFieldEnum = {
  backgroundId: 'backgroundId',
  name: 'name',
  source: 'source'
};

exports.Prisma.FeatScalarFieldEnum = {
  featId: 'featId',
  name: 'name',
  category: 'category',
  shortDescription: 'shortDescription',
  longDescription: 'longDescription',
  prerequisites: 'prerequisites'
};

exports.Prisma.FeatAbilityBoostScalarFieldEnum = {
  boostId: 'boostId',
  featId: 'featId',
  ability: 'ability',
  increaseValue: 'increaseValue',
  abilitiesToChoose: 'abilitiesToChoose',
  maxValue: 'maxValue'
};

exports.Prisma.PersFeatScalarFieldEnum = {
  persFeatId: 'persFeatId',
  featId: 'featId',
  persId: 'persId'
};

exports.Prisma.MagicItemScalarFieldEnum = {
  magicItemId: 'magicItemId',
  name: 'name',
  itemType: 'itemType',
  rarity: 'rarity',
  description: 'description',
  bonusToAC: 'bonusToAC',
  BonusToAttackRoll: 'BonusToAttackRoll',
  BonusToDamage: 'BonusToDamage'
};

exports.Prisma.WeaponScalarFieldEnum = {
  weaponId: 'weaponId',
  name: 'name',
  damage: 'damage',
  damageType: 'damageType',
  weaponType: 'weaponType',
  properties: 'properties',
  versatileDamage: 'versatileDamage',
  normalRange: 'normalRange',
  longRange: 'longRange'
};

exports.Prisma.ArmorScalarFieldEnum = {
  armorId: 'armorId',
  name: 'name',
  armorType: 'armorType',
  baseAC: 'baseAC',
  strengthReq: 'strengthReq',
  stealthDisadvantage: 'stealthDisadvantage'
};

exports.Prisma.PersSkillScalarFieldEnum = {
  persSkillId: 'persSkillId',
  skillId: 'skillId',
  persId: 'persId',
  proficiencyType: 'proficiencyType',
  customModifier: 'customModifier',
  name: 'name'
};

exports.Prisma.PersWeaponScalarFieldEnum = {
  persWeaponId: 'persWeaponId',
  persId: 'persId',
  weaponId: 'weaponId',
  overrideDamage: 'overrideDamage',
  attackBonus: 'attackBonus',
  overrideName: 'overrideName',
  overrideNormalRange: 'overrideNormalRange',
  overrideLongRange: 'overrideLongRange',
  overrideDamageType: 'overrideDamageType',
  overrideAttackAbility: 'overrideAttackAbility',
  isProficient: 'isProficient'
};

exports.Prisma.PersArmorScalarFieldEnum = {
  persArmorId: 'persArmorId',
  armorId: 'armorId',
  persId: 'persId',
  overrideBaseAC: 'overrideBaseAC',
  miscACBonus: 'miscACBonus',
  isProficient: 'isProficient',
  equipped: 'equipped'
};

exports.Prisma.PersMagicItemScalarFieldEnum = {
  persMagicItemId: 'persMagicItemId',
  persId: 'persId',
  magicItemId: 'magicItemId'
};

exports.Prisma.EquipmentPackScalarFieldEnum = {
  equipmentPackId: 'equipmentPackId',
  name: 'name',
  description: 'description',
  items: 'items'
};

exports.Prisma.ClassStartingEquipmentOptionScalarFieldEnum = {
  optionId: 'optionId',
  classId: 'classId',
  choiceGroup: 'choiceGroup',
  option: 'option',
  weaponId: 'weaponId',
  armorId: 'armorId',
  equipmentPackId: 'equipmentPackId',
  quantity: 'quantity',
  chooseAnyArmor: 'chooseAnyArmor',
  armorType: 'armorType',
  chooseAnyWeapon: 'chooseAnyWeapon',
  weaponType: 'weaponType',
  weaponCount: 'weaponCount',
  description: 'description'
};

exports.Prisma.BackgroundStartingEquipmentScalarFieldEnum = {
  equipmentId: 'equipmentId',
  backgroundId: 'backgroundId',
  weaponId: 'weaponId',
  armorId: 'armorId',
  equipmentPackId: 'equipmentPackId',
  items: 'items',
  quantity: 'quantity',
  chooseAnyArmor: 'chooseAnyArmor',
  armorType: 'armorType',
  chooseAnyWeapon: 'chooseAnyWeapon',
  weaponType: 'weaponType',
  weaponCount: 'weaponCount',
  description: 'description'
};

exports.Prisma.PersNoteScalarFieldEnum = {
  persNoteId: 'persNoteId',
  persId: 'persId',
  text: 'text'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Source = exports.$Enums.Source = {
  PHB: 'PHB',
  DMG: 'DMG',
  MM: 'MM',
  XGTE: 'XGTE',
  TCOE: 'TCOE',
  FTOD: 'FTOD',
  EGTW: 'EGTW',
  SCAG: 'SCAG',
  GGTR: 'GGTR',
  AI: 'AI',
  IDROTF: 'IDROTF',
  VGTM: 'VGTM',
  MTOF: 'MTOF',
  MPMM: 'MPMM',
  BPGOTG: 'BPGOTG',
  VRGTR: 'VRGTR',
  MOOT: 'MOOT',
  SACOC: 'SACOC',
  PHB_2024: 'PHB_2024',
  DMG_2024: 'DMG_2024',
  MM_2024: 'MM_2024'
};

exports.Ability = exports.$Enums.Ability = {
  STR: 'STR',
  DEX: 'DEX',
  CON: 'CON',
  INT: 'INT',
  WIS: 'WIS',
  CHA: 'CHA'
};

exports.SpellcastingType = exports.$Enums.SpellcastingType = {
  NONE: 'NONE',
  FULL: 'FULL',
  HALF: 'HALF',
  THIRD: 'THIRD',
  PACT: 'PACT'
};

exports.ArmorType = exports.$Enums.ArmorType = {
  LIGHT: 'LIGHT',
  MEDIUM: 'MEDIUM',
  HEAVY: 'HEAVY',
  SHIELD: 'SHIELD'
};

exports.WeaponType = exports.$Enums.WeaponType = {
  SIMPLE_WEAPON: 'SIMPLE_WEAPON',
  MARTIAL_WEAPON: 'MARTIAL_WEAPON',
  FIREARMS: 'FIREARMS'
};

exports.RestType = exports.$Enums.RestType = {
  SHORT_REST: 'SHORT_REST',
  LONG_REST: 'LONG_REST',
  DAY: 'DAY'
};

exports.FeatureDisplayType = exports.$Enums.FeatureDisplayType = {
  STANDARD: 'STANDARD',
  RESOURCE: 'RESOURCE',
  ACTION: 'ACTION',
  PASSIVE: 'PASSIVE',
  TOGGLE: 'TOGGLE'
};

exports.Size = exports.$Enums.Size = {
  TINY: 'TINY',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  HUGE: 'HUGE',
  GARGANTUAN: 'GARGANTUAN'
};

exports.Language = exports.$Enums.Language = {
  COMMON: 'COMMON',
  DWARVISH: 'DWARVISH',
  ELVISH: 'ELVISH',
  GIANT: 'GIANT',
  GNOMISH: 'GNOMISH',
  GOBLIN: 'GOBLIN',
  HALFLING: 'HALFLING',
  ORC: 'ORC',
  ABYSSAL: 'ABYSSAL',
  CELESTIAL: 'CELESTIAL',
  DRACONIC: 'DRACONIC',
  DEEP_SPEECH: 'DEEP_SPEECH',
  INFERNAL: 'INFERNAL',
  PRIMORDIAL: 'PRIMORDIAL',
  SYLVAN: 'SYLVAN',
  UNDERCOMMON: 'UNDERCOMMON',
  DRUIDIC: 'DRUIDIC',
  THIEVES_CANT: 'THIEVES_CANT',
  COMMON_SIGN_LANGUAGE: 'COMMON_SIGN_LANGUAGE'
};

exports.DamageType = exports.$Enums.DamageType = {
  BLUDGEONING: 'BLUDGEONING',
  PIERCING: 'PIERCING',
  SLASHING: 'SLASHING',
  ACID: 'ACID',
  COLD: 'COLD',
  FIRE: 'FIRE',
  LIGHTNING: 'LIGHTNING',
  THUNDER: 'THUNDER',
  FORCE: 'FORCE',
  NECROTIC: 'NECROTIC',
  POISON: 'POISON',
  PSYCHIC: 'PSYCHIC',
  RADIANT: 'RADIANT'
};

exports.FeatCategory = exports.$Enums.FeatCategory = {
  ORIGIN: 'ORIGIN',
  GENERAL: 'GENERAL',
  FIGHTING_STYLE: 'FIGHTING_STYLE',
  EPIC_BOON: 'EPIC_BOON'
};

exports.MagicItemType = exports.$Enums.MagicItemType = {
  WEAPON: 'WEAPON',
  ARMOR: 'ARMOR',
  WONDROUS_ITEM: 'WONDROUS_ITEM',
  POTION: 'POTION',
  SCROLL: 'SCROLL',
  RING: 'RING',
  WAND: 'WAND',
  ROD: 'ROD',
  STAFF: 'STAFF'
};

exports.ItemRarity = exports.$Enums.ItemRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  VERY_RARE: 'VERY_RARE',
  LEGENDARY: 'LEGENDARY',
  ARTIFACT: 'ARTIFACT'
};

exports.WeaponCategory = exports.$Enums.WeaponCategory = {
  CLUB: 'CLUB',
  DAGGER: 'DAGGER',
  GREATCLUB: 'GREATCLUB',
  HANDAXE: 'HANDAXE',
  JAVELIN: 'JAVELIN',
  LIGHT_HAMMER: 'LIGHT_HAMMER',
  MACE: 'MACE',
  QUARTERSTAFF: 'QUARTERSTAFF',
  SICKLE: 'SICKLE',
  SPEAR: 'SPEAR',
  UNARMED_STRIKE: 'UNARMED_STRIKE',
  LIGHT_CROSSBOW: 'LIGHT_CROSSBOW',
  DART: 'DART',
  SHORTBOW: 'SHORTBOW',
  SLING: 'SLING',
  BATTLEAXE: 'BATTLEAXE',
  FLAIL: 'FLAIL',
  GLAIVE: 'GLAIVE',
  GREATAXE: 'GREATAXE',
  GREATSWORD: 'GREATSWORD',
  HALBERD: 'HALBERD',
  LANCE: 'LANCE',
  LONGSWORD: 'LONGSWORD',
  MAUL: 'MAUL',
  MORNINGSTAR: 'MORNINGSTAR',
  PIKE: 'PIKE',
  RAPIER: 'RAPIER',
  SCIMITAR: 'SCIMITAR',
  SHORTSWORD: 'SHORTSWORD',
  TRIDENT: 'TRIDENT',
  WAR_PICK: 'WAR_PICK',
  WARHAMMER: 'WARHAMMER',
  WHIP: 'WHIP',
  BLOWGUN: 'BLOWGUN',
  HAND_CROSSBOW: 'HAND_CROSSBOW',
  HEAVY_CROSSBOW: 'HEAVY_CROSSBOW',
  LONGBOW: 'LONGBOW',
  NET: 'NET',
  HOMEBREW: 'HOMEBREW'
};

exports.WeaponProperty = exports.$Enums.WeaponProperty = {
  FINESSE: 'FINESSE',
  VERSATILE: 'VERSATILE',
  LIGHT: 'LIGHT',
  HEAVY: 'HEAVY',
  REACH: 'REACH',
  TWO_HANDED: 'TWO_HANDED',
  THROWN: 'THROWN',
  AMMUNITION: 'AMMUNITION',
  LOADING: 'LOADING',
  SPECIAL: 'SPECIAL',
  MAGIC_WEAPON: 'MAGIC_WEAPON'
};

exports.ArmorCategory = exports.$Enums.ArmorCategory = {
  PADDED: 'PADDED',
  LEATHER: 'LEATHER',
  STUDDED_LEATHER: 'STUDDED_LEATHER',
  HIDE: 'HIDE',
  CHAIN_SHIRT: 'CHAIN_SHIRT',
  SCALE_MAIL: 'SCALE_MAIL',
  BREASTPLATE: 'BREASTPLATE',
  HALF_PLATE: 'HALF_PLATE',
  RING_MAIL: 'RING_MAIL',
  CHAIN_MAIL: 'CHAIN_MAIL',
  SPLINT: 'SPLINT',
  PLATE: 'PLATE',
  SHIELD: 'SHIELD',
  HOMEBREW: 'HOMEBREW'
};

exports.SkillProficiencyType = exports.$Enums.SkillProficiencyType = {
  NONE: 'NONE',
  HALF: 'HALF',
  PROFICIENT: 'PROFICIENT',
  EXPERTISE: 'EXPERTISE'
};

exports.Skills = exports.$Enums.Skills = {
  ATHLETICS: 'ATHLETICS',
  ACROBATICS: 'ACROBATICS',
  SLEIGHT_OF_HAND: 'SLEIGHT_OF_HAND',
  STEALTH: 'STEALTH',
  ARCANA: 'ARCANA',
  HISTORY: 'HISTORY',
  INVESTIGATION: 'INVESTIGATION',
  NATURE: 'NATURE',
  RELIGION: 'RELIGION',
  ANIMAL_HANDLING: 'ANIMAL_HANDLING',
  INSIGHT: 'INSIGHT',
  MEDICINE: 'MEDICINE',
  PERCEPTION: 'PERCEPTION',
  SURVIVAL: 'SURVIVAL',
  DECEPTION: 'DECEPTION',
  INTIMIDATION: 'INTIMIDATION',
  PERFORMANCE: 'PERFORMANCE',
  PERSUASION: 'PERSUASION'
};

exports.EquipmentPackCategory = exports.$Enums.EquipmentPackCategory = {
  BURGLARS_PACK: 'BURGLARS_PACK',
  DIPLOMATS_PACK: 'DIPLOMATS_PACK',
  DUNGEONEERS_PACK: 'DUNGEONEERS_PACK',
  ENTERTAINERS_PACK: 'ENTERTAINERS_PACK',
  EXPLORERS_PACK: 'EXPLORERS_PACK',
  PRIESTS_PACK: 'PRIESTS_PACK',
  SCHOLARS_PACK: 'SCHOLARS_PACK',
  COMPONENT_POUCH: 'COMPONENT_POUCH',
  SPELLBOOK: 'SPELLBOOK',
  HOMEBREW: 'HOMEBREW'
};

exports.Prisma.ModelName = {
  Character: 'Character',
  CharacterSpells: 'CharacterSpells',
  Creature: 'Creature',
  Spell: 'Spell',
  SpellClasses: 'SpellClasses',
  SpellRaces: 'SpellRaces',
  Spellbook: 'Spellbook',
  SpellbookSpells: 'SpellbookSpells',
  User: 'User',
  Class: 'Class',
  Subclass: 'Subclass',
  Pers: 'Pers',
  PersMulticlass: 'PersMulticlass',
  PersFeature: 'PersFeature',
  Feature: 'Feature',
  ClassFeature: 'ClassFeature',
  SubclassFeature: 'SubclassFeature',
  RaceTrait: 'RaceTrait',
  SubraceTrait: 'SubraceTrait',
  BackgroundFeature: 'BackgroundFeature',
  FeatFeature: 'FeatFeature',
  MagicItemFeature: 'MagicItemFeature',
  Race: 'Race',
  Subrace: 'Subrace',
  Background: 'Background',
  Feat: 'Feat',
  FeatAbilityBoost: 'FeatAbilityBoost',
  PersFeat: 'PersFeat',
  MagicItem: 'MagicItem',
  Weapon: 'Weapon',
  Armor: 'Armor',
  PersSkill: 'PersSkill',
  PersWeapon: 'PersWeapon',
  PersArmor: 'PersArmor',
  PersMagicItem: 'PersMagicItem',
  EquipmentPack: 'EquipmentPack',
  ClassStartingEquipmentOption: 'ClassStartingEquipmentOption',
  BackgroundStartingEquipment: 'BackgroundStartingEquipment',
  PersNote: 'PersNote'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
